# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-02-08 20:43
from __future__ import unicode_literals

import core.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Pipol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='Escriba un correo electrónico', max_length=254, unique=True, verbose_name='email')),
                ('username', models.CharField(error_messages={'unique': 'Ya existe un usuario con ese nombre.'}, help_text='\n            Obligatorio. 30 caracteres o menos. Letras, números\n            ó @ . + - _ solamente.\n        ', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='nombre de usuario')),
                ('first_name', models.CharField(blank=True, max_length=70, verbose_name='Nombre')),
                ('last_name', models.CharField(blank=True, max_length=70)),
                ('rfc', models.CharField(blank=True, help_text='Escriba el RFC del usuario', max_length=13, verbose_name='RFC')),
                ('entidad', models.PositiveSmallIntegerField(choices=[(29, 'Tlaxcala')], default=29)),
                ('sitio', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Junta Local'), (1, '01 Junta Distrital'), (2, '02 Junta Distrital'), (3, 'O3 Junta Distrital')], null=True)),
                ('puesto', models.CharField(blank=True, choices=[('VEL', 'Vocal Ejecutivo de Junta Local'), ('VSL', 'Vocal Secretario de Junta Local'), ('VRL', 'Vocal del RFE de Junta Local'), ('VCL', 'Vocal de Capacitación de Junta Local'), ('VOL', 'Vocal de Organización de Junta Local'), ('VED', 'Vocal Ejecutivo de Junta Distrital'), ('VSD', 'Vocal Secretario de Junta Distrital'), ('VRD', 'Vocal del RFE de Junta Distrital'), ('VCD', 'Vocal de Capacitación de Junta Distrital'), ('VOD', 'Vocal de Organización de Junta Distrital'), ('JOSA', 'JOSA'), ('JMM', 'Jefe de Monitoreo a Módulos'), ('JOCE', 'Jefe de Cartografía'), ('RA', 'Rama Administrativa')], max_length=4, null=True)),
                ('orden', models.PositiveSmallIntegerField(default=99)),
                ('is_staff', models.BooleanField(default=False, help_text='Determina quienes pueden acceder al área interna.', verbose_name='es staff')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si el usuario debe ser tratado como un usuario activo. Desactive este campo en lugar de eliminar usuarios.', verbose_name='activo')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='fecha de creación')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', core.models.PipolManager()),
            ],
        ),
    ]
